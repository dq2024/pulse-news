{"ast":null,"code":"// // src/App.jsx\n// import React, { useState, useEffect } from 'react';\n// import { fetchResults, fetchStats } from './api';\n// import TimeSeriesChart from './components/TimeSeriesChart';\n// import TopList         from './components/TopList';\n\n// function App() {\n//   const [results, setResults] = useState([]);\n//   const [stats, setStats]     = useState(null);\n//   const [error, setError]     = useState(null);\n\n//   useEffect(() => {\n//     const load = async () => {\n//       try {\n//         const [r, s] = await Promise.all([\n//           fetchResults(5),     // just grab 5 for now\n//           fetchStats(15)       // last 15 minutes\n//         ]);\n//         setResults(r);\n//         setStats(s);\n//       } catch (e) {\n//         setError(e.message);\n//       }\n//     };\n//     load();\n//     const iv = setInterval(load, 30000); // refresh every 30s\n//     return () => clearInterval(iv);\n//   }, []);\n\n//   if (error) {\n//     return <div style={{ padding: 20, color: 'red' }}>\n//       ‚ùå {error}\n//     </div>;\n//   }\n\n//   const positives = results.filter(i => i.label === 'POSITIVE');\n//   const negatives = results.filter(i => i.label === 'NEGATIVE');\n\n//   return (\n//     <div style={{ padding: 20 }}>\n//       <h1>üî¥ Reddit r/news Sentiment Dashboard</h1>\n\n//       {stats ? (\n//         <section>\n//           <h2>Stats (last {stats.window_minutes} min)</h2>\n//           <ul>\n//             <li>Average sentiment: {stats.average_sentiment.toFixed(2)}</li>\n//             <li>Positive: {stats.positive_count}</li>\n//             <li>Negative: {stats.negative_count}</li>\n//             <li>Total: {stats.total_count}</li>\n//           </ul>\n//         </section>\n//       ) : (\n//         <p>Loading stats‚Ä¶</p>\n//       )}\n\n//       {results.length > 0 ? (\n//         <section>\n//           <h2>Latest Posts</h2>\n//           <ul>\n//             {results.map(item => (\n//               <li key={item.id}>\n//                 <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                   {item.title}\n//                 </a>\n//                 <strong style={{ marginLeft: 8 }}>\n//                   {item.label} ({(item.score*100).toFixed(0)}%)\n//                 </strong>\n//               </li>\n//             ))}\n//           </ul>\n//         </section>\n//       ) : (\n//         <p>Loading posts‚Ä¶</p>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/denizqian/Documents/pulse-news/frontend/src/App.jsx"],"sourcesContent":["// // src/App.jsx\n// import React, { useState, useEffect } from 'react';\n// import { fetchResults, fetchStats } from './api';\n// import TimeSeriesChart from './components/TimeSeriesChart';\n// import TopList         from './components/TopList';\n\n// function App() {\n//   const [results, setResults] = useState([]);\n//   const [stats, setStats]     = useState(null);\n//   const [error, setError]     = useState(null);\n\n//   useEffect(() => {\n//     const load = async () => {\n//       try {\n//         const [r, s] = await Promise.all([\n//           fetchResults(5),     // just grab 5 for now\n//           fetchStats(15)       // last 15 minutes\n//         ]);\n//         setResults(r);\n//         setStats(s);\n//       } catch (e) {\n//         setError(e.message);\n//       }\n//     };\n//     load();\n//     const iv = setInterval(load, 30000); // refresh every 30s\n//     return () => clearInterval(iv);\n//   }, []);\n\n//   if (error) {\n//     return <div style={{ padding: 20, color: 'red' }}>\n//       ‚ùå {error}\n//     </div>;\n//   }\n\n//   const positives = results.filter(i => i.label === 'POSITIVE');\n//   const negatives = results.filter(i => i.label === 'NEGATIVE');\n  \n//   return (\n//     <div style={{ padding: 20 }}>\n//       <h1>üî¥ Reddit r/news Sentiment Dashboard</h1>\n\n//       {stats ? (\n//         <section>\n//           <h2>Stats (last {stats.window_minutes} min)</h2>\n//           <ul>\n//             <li>Average sentiment: {stats.average_sentiment.toFixed(2)}</li>\n//             <li>Positive: {stats.positive_count}</li>\n//             <li>Negative: {stats.negative_count}</li>\n//             <li>Total: {stats.total_count}</li>\n//           </ul>\n//         </section>\n//       ) : (\n//         <p>Loading stats‚Ä¶</p>\n//       )}\n\n//       {results.length > 0 ? (\n//         <section>\n//           <h2>Latest Posts</h2>\n//           <ul>\n//             {results.map(item => (\n//               <li key={item.id}>\n//                 <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                   {item.title}\n//                 </a>\n//                 <strong style={{ marginLeft: 8 }}>\n//                   {item.label} ({(item.score*100).toFixed(0)}%)\n//                 </strong>\n//               </li>\n//             ))}\n//           </ul>\n//         </section>\n//       ) : (\n//         <p>Loading posts‚Ä¶</p>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}